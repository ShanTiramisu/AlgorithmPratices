# Bit Operation:
#The & operator compares each bit and set it to 1 if both are 1, otherwise it is set to 0
#The | operator compares each bit and set it to 1 if one or both is 1, otherwise it is set to 0
#The ^ operator compares each bit and set it to 1 if only one is 1, otherwise (if both are 1 or both are 0) it is set to 0
#The ~ operator inverts each bit (0 becomes 1 and 1 becomes 0)
#The << operator inserts the specified number of 0's (in this case 2) from the right and let the same amount of leftmost bits fall off
#The >> operator moves each bit the specified number of times to the right. Empty holes at the left are filled with 0's.


""""
Decimal numbers and their binary values:
0 = 0000000000000000
1 = 0000000000000001
2 = 0000000000000010
3 = 0000000000000011
4 = 0000000000000100
5 = 0000000000000101
6 = 0000000000000110
7 = 0000000000000111
"""

# Single Number, Counting Bits, Hamming Distance
# Leetcode 268, 389, 191, 371, 201


# Leetcode 136: Single Number
def single_number(nums):
    '''
    Given a non-empty array of integers nums, 
    every element appears twice except for one. 
    Find that single one. You must implement a solution with a 
    linear runtime complexity and use only constant extra space.
    >>> single_number([2,2,1])
    >>> 1

    >>> single_number([4,1,2,1,2])
    >>> 4

    >>> single_number([1])
    >>> 1
    '''
    result = 0
    for num in nums:
        result ^= num
    return result

# Leetcode 268
def missing_number(nums):
    '''
    Given an array nums containing n distinct numbers in the range [0, n],
    return the one number that is missing from the array.
    >>> missing_number[3, 0, 1]
    >>> 2

    >>> missing_number[0, 1]
    >>> 2
    '''
    sum = 0
    for i in nums:
        sum += i
    n = len(nums)
    expect_sum= (n +1) * n//2
    return expect_sum - sum

def missing_number_bit(nums):
    n = len(nums)
    result = n
    for i in range(n):
        result ^= i^nums[i]
    return result

# leetcode 389
def find_difference(s, t):
    '''
    Given two strings s and t which consist of lowercase letters, 
    string t is generated by shuffling string s and adding one extra
    character at a random position.
    Return the extra character that was added to t.
    '''
    result = 0
    for i in s + t:
        result ^= ord(i)
    return chr(result)

